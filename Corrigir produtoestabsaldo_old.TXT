--Executa por estabelecimento de apenas um produto
--DROP FUNCTION temporario()
CREATE OR REPLACE FUNCTION temporario() RETURNS void AS $$
DECLARE
        i INTEGER;
        p DECIMAL(10,2);
        n INTEGER;
        var_codestabelec INTEGER;
        var_dtinicial date;
        var_dtcorrente date;
        var_saldo numeric(15,4);
        var_quantidade numeric(15,4);
        row_estabelecimento estabelecimento%ROWTYPE;
        row_produto produto%ROWTYPE;
        row_movimento movimento%ROWTYPE;
        arr_codproduto produto%ROWTYPE;
BEGIN
        RAISE NOTICE 'Iniciando processo';
        var_dtinicial := CAST('2010-01-01' AS date);
        var_codestabelec := 6;

	RAISE NOTICE 'Selecionando produtos com problema';
	SELECT codproduto INTO arr_codproduto  FROM (
			SELECT codproduto, codestabelec , sldatual AS saldo, 
			(SELECT saldo FROM produtoestabsaldo WHERE codproduto=produtoestab.codproduto AND codestabelec=produtoestab.codestabelec ORDER BY data DESC LIMIT 1) AS estabsaldo
			FROM produtoestab
		) AS teste WHERE saldo<>estabsaldo AND codestabelec=var_codestabelec;

		
        RAISE NOTICE 'Deletando registros antigos';
        DELETE FROM produtoestabsaldo WHERE data >= var_dtinicial AND codestabelec = var_codestabelec AND codproduto IN (SELECT codproduto FROM arr_codproduto);


        RAISE NOTICE 'Calculando total a ser analisado';
        i := 1;
        n := (SELECT COUNT(*) FROM produtoestab WHERE codestabelec = var_codestabelec AND codproduto IN (SELECT codproduto FROM arr_codproduto));
        RAISE NOTICE 'Registros a serem analisados: %', n;
        
        FOR row_estabelecimento IN SELECT * FROM estabelecimento WHERE codestabelec = var_codestabelec ORDER BY codestabelec LOOP
               FOR row_produto IN SELECT * FROM produto WHERE codproduto IN (SELECT codproduto FROM arr_codproduto) ORDER BY codproduto LOOP
                       p := i::DECIMAL / n::DECIMAL * 100;
                       RAISE NOTICE 'Progresso total: % de % ... %', i, n, p;
                       var_dtcorrente := var_dtinicial;
                       var_saldo := saldo(row_estabelecimento.codestabelec,row_produto.codproduto,var_dtinicial);
                       WHILE var_dtcorrente <= CURRENT_DATE LOOP
                               var_quantidade := COALESCE((SELECT SUM(qtdeunidade * quantidade * (CASE WHEN tipo = 'E' THEN 1 ELSE -1 END)) FROM movimento WHERE codestabelec = row_estabelecimento.codestabelec AND codproduto = row_produto.codproduto AND dtmovto = var_dtcorrente),0);
                               IF var_quantidade != 0 THEN
                                      var_saldo := var_saldo + var_quantidade;
                                      INSERT INTO produtoestabsaldo (data,codestabelec,codproduto,saldo) VALUES (var_dtcorrente,row_estabelecimento.codestabelec,row_produto.codproduto,var_saldo);
                               END IF;
                               var_dtcorrente := var_dtcorrente + 1;
                       END LOOP;
                       i := i + 1;
               END LOOP;
        END LOOP;
END;
$$ LANGUAGE plpgsql VOLATILE;

SELECT temporario();





-- Versão 1
CREATE OR REPLACE FUNCTION temp() RETURNS void AS $$
	DECLARE var_dtinicial date;
	DECLARE var_dtcorrente date;
	DECLARE var_saldo numeric(15,4);
	DECLARE var_quantidade numeric(15,4);
	DECLARE row_estabelecimento estabelecimento%ROWTYPE;
	DECLARE row_produto produto%ROWTYPE;
	DECLARE row_movimento movimento%ROWTYPE;
BEGIN
	var_dtinicial := CAST('2013-01-01' AS date);
	DELETE FROM produtoestabsaldo WHERE data >= var_dtinicial;
	FOR row_estabelecimento IN SELECT * FROM estabelecimento ORDER BY codestabelec LOOP
		FOR row_produto IN SELECT * FROM produto ORDER BY codproduto LOOP
			var_dtcorrente := var_dtinicial;
			var_saldo := saldo(row_estabelecimento.codestabelec,row_produto.codproduto,var_dtinicial);
			WHILE var_dtcorrente <= CURRENT_DATE LOOP
				var_quantidade := COALESCE((SELECT SUM(qtdeunidade * quantidade * (CASE WHEN tipo = 'E' THEN 1 ELSE -1 END)) FROM movimento WHERE codestabelec = row_estabelecimento.codestabelec AND codproduto = row_produto.codproduto AND dtmovto = var_dtcorrente),0);
				IF var_quantidade != 0 THEN
					var_saldo := var_saldo + var_quantidade;
					INSERT INTO produtoestabsaldo (data,codestabelec,codproduto,saldo) VALUES (var_dtcorrente,row_estabelecimento.codestabelec,row_produto.codproduto,var_saldo);
				END IF;
				var_dtcorrente := var_dtcorrente + 1;
			END LOOP;
		END LOOP;
	END LOOP;
END;
$$ LANGUAGE plpgsql VOLATILE;
SELECT temp();
DROP FUNCTION temp();


-------------------------------------------------------------------------------------------------------------

--Executa comando por estabelecimento


CREATE OR REPLACE FUNCTION temporario() RETURNS void AS $$
DECLARE
        i INTEGER;
        p DECIMAL(10,2);
        n INTEGER;
        var_codestabelec INTEGER;
        var_dtinicial date;
        var_dtcorrente date;
        var_saldo numeric(15,4);
        var_quantidade numeric(15,4);
        row_estabelecimento estabelecimento%ROWTYPE;
        row_produto produto%ROWTYPE;
        row_movimento movimento%ROWTYPE;
BEGIN
        RAISE NOTICE 'Iniciando processo';
        var_dtinicial := CAST('2010-01-01' AS date);
        var_codestabelec := 1;

        RAISE NOTICE 'Deletando registros antigos';
        DELETE FROM produtoestabsaldo WHERE data >= var_dtinicial AND codestabelec = var_codestabelec;

        RAISE NOTICE 'Calculando total a ser analisado';
        i := 1;
        n := (SELECT COUNT(*) FROM produtoestab WHERE codestabelec = var_codestabelec);
        RAISE NOTICE 'Registros a serem analisados: %', n;
        
        FOR row_estabelecimento IN SELECT * FROM estabelecimento WHERE codestabelec = var_codestabelec ORDER BY codestabelec LOOP
               FOR row_produto IN SELECT * FROM produto ORDER BY codproduto LOOP
                       p := i::DECIMAL / n::DECIMAL * 100;
                       RAISE NOTICE 'Progresso total: % de % ... %', i, n, p;
                       var_dtcorrente := var_dtinicial;
                       var_saldo := saldo(row_estabelecimento.codestabelec,row_produto.codproduto,var_dtinicial);
                       WHILE var_dtcorrente <= CURRENT_DATE LOOP
                               var_quantidade := COALESCE((SELECT SUM(qtdeunidade * quantidade * (CASE WHEN tipo = 'E' THEN 1 ELSE -1 END)) FROM movimento WHERE codestabelec = row_estabelecimento.codestabelec AND codproduto = row_produto.codproduto AND dtmovto = var_dtcorrente),0);
                               IF var_quantidade != 0 THEN
                                      var_saldo := var_saldo + var_quantidade;
                                      INSERT INTO produtoestabsaldo (data,codestabelec,codproduto,saldo) VALUES (var_dtcorrente,row_estabelecimento.codestabelec,row_produto.codproduto,var_saldo);
                               END IF;
                               var_dtcorrente := var_dtcorrente + 1;
                       END LOOP;
                       i := i + 1;
               END LOOP;
        END LOOP;
END;
$$ LANGUAGE plpgsql VOLATILE;

SELECT temporario();
